<head>
  <title>Dettagli della Sfida</title>
  <meta name="csrf-token" content="<%= csrf_meta_tags %>" >
</head>

<div class="flex flex-col h-full w-full bg-gray-900 text-white">
  <!-- Header Section -->
  <div class="flex flex-col text-center p-4 bg-gray-800 border-b border-gray-700">
    <h1 class="text-3xl font-bold text-white mb-2">Dettagli della Sfida</h1>
    <div class="text-white space-y-2">
      <p><strong>Player 1:</strong> <%= @match.player_1.username %></p>
      <p><strong>Player 2:</strong> <%= @match.player_2.username %></p>
      <p><strong>Language:</strong> <%= @match.language %></p>
      <input type="hidden" id="match-id" value="<%= @match.id %>" />
    </div>
  </div>

  <!-- Main Content Section -->
  <div class="flex flex-row justify-center space-x-8 px-6 py-6 overflow-auto">
    <!-- Left Column -->
    <div class="flex flex-col grow space-y-6 max-w-5xl">
      <!-- Challenge Info Box -->
      <div class="flex flex-col bg-gray-800 p-6 rounded-lg shadow-lg">
        <h2 class="text-2xl font-semibold text-white mb-4">Informazioni sulla Sfida</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="flex flex-col">
            <span class="text-sm font-semibold text-gray-400">Titolo</span>
            <span class="text-lg font-bold text-white"><%= @challenge.title %></span>
          </div>
          <div class="flex flex-col">
            <span class="text-sm font-semibold text-gray-400">Difficolt√†</span>
            <span class="text-lg font-bold text-white capitalize"><%= @challenge.difficulty %></span>
          </div>
          <div class="flex flex-col md:col-span-3">
            <span class="text-sm font-semibold text-gray-400">Descrizione</span>
            <p class="text-white mt-1"><%= @challenge.description %></p>
          </div>
        </div>
      </div>

      <!-- Code Editor Box -->
      <div class="flex flex-col bg-gray-800 h-[30rem] p-4 rounded-lg shadow-lg">
        <div class="flex flex-row py-2 justify-between items-center border-b border-gray-700 mb-4">
          <h2 class="text-lg font-bold">CODICE</h2>
          <h2 class="text-lg font-bold"><%= @challenge.language %></h2>
        </div>
        <div class="h-full">
          <div id="code-editor" class="bg-black rounded-lg p-2"></div>
        </div>
      </div>

      <!-- Console Box -->
      <div class="flex flex-col bg-gray-800 p-4 h-[15rem] rounded-lg shadow-lg">
        <h2 class="text-lg font-bold text-center">CONSOLE</h2>
        <div class="bg-[#2d2d2d] text-white mt-2 p-4 h-full overflow-auto rounded-lg">
          <pre id="output" class="text-lime-500 font-mono"></pre>
        </div>
      </div>
    </div>

    <!-- Right Column -->
    <div class="flex flex-col min-w-lg p-4 space-y-6 bg-gray-800 rounded-lg shadow-lg">

      <!-- Timer -->
      <div class="flex justify-center mt-4">
        <h2 id="timer" class="text-2xl font-bold text-white"></h2>
      </div>

      <!-- Timeout Form -->
      <%= form_with(url: match_timeout_path(@match), method: :post, id: 'timeout-form', local: true, style: 'display:none;') do |form| %>
        <%= hidden_field_tag :match_id, @match.id %>
      <% end %>

      <!-- Run Code Button -->
      <%= form_with(url: match_execute_code_path(@match.id), method: :post, id: 'execute-form', class: "overflow-hidden", local: false) do |form| %>
        <%= hidden_field_tag :language, @challenge.language, id: 'hidden-language-selection' %>
        <%= hidden_field_tag :code, '', id: 'hidden-code-input' %>
        <%= hidden_field_tag :match_id, @match.id %>
        <%= form.submit "Run Code", id: "submit-code", class: "px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 w-full transition duration-200" %>
      <% end %>

      <!-- Chat Box -->
      <div class="flex flex-col bg-gray-800 p-4 max-h-[26rem] rounded-lg shadow-lg">
        <h2 class="text-lg font-bold text-center mb-2">CHAT</h2>
        <div class="bg-gray-700 text-white p-2 h-full overflow-y-auto rounded-lg max-h-[26rem]" id="chat-container">
          <div id="chat" class="w-full space-y-2">
            <%= render @match.chat_messages.includes(:user) %>
          </div>
        </div>
      </div>

      <!-- Message Form -->
      <%= form_with(model: [@match, ChatMessage.new], id: 'chat-form', local: false, class: "flex flex-col space-y-2") do |form| %>
        <%= form.text_field :content, id: 'chat-input', class: 'w-full px-3 py-2 text-black rounded mb-2', placeholder: 'Scrivi un messaggio...', autocomplete: 'off', data: { user_id: current_user.id } %>
        <%= form.hidden_field :user_id, value: current_user.id %>
        <%= form.submit 'Invia', class: 'px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-200' %>
      <% end %>

      <!-- Surrender Button -->
      <%= form_with(url: match_surrender_path(@match), method: :post, id: 'surrender-form', local: true) do |form| %>
        <%= form.submit "Surrender", id: "surrender-submit", class: "px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 w-full transition duration-200" %>
      <% end %>
    </div>
  </div>
</div>

<script type="module">
    import { initializeCodeMirror } from "codemirror_setup";
    import { create_executable } from "code_generation";
    import { subscribeToMatchAndSubmissionChannels } from "match_subscription";

    document.addEventListener("turbo:load", function() {
        let code_template = <%= @challenge.code_template.to_json.html_safe %>;
        let currentLanguage = <%= @match.language.to_json.html_safe %>;
        let test_template = <%= @challenge.test_template.to_json.html_safe %>;
        const match_id = "<%= @match.id %>";
        const user_id = "<%= current_user.id %>";
        subscribeToMatchAndSubmissionChannels(match_id, user_id);

        const form = document.getElementById('execute-form');
        const output = document.getElementById('output');
        const editor = document.getElementById('code-editor');
        const hidden_code = document.getElementById('hidden-code-input');
        initializeCodeMirror(editor, form, hidden_code, code_template, currentLanguage, 20);
        form.addEventListener('submit', function (e) {
            e.preventDefault(); // Prevent the default form submission
            // Gather form data
            const formData = new FormData(form);
            formData.set("code", create_executable(currentLanguage, hidden_code.value, test_template));
            // Perform the AJAX request using Fetch API
            fetch(form.action, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json', // Expect JSON response
                },
                body: formData
            })
              .then(response => response.json())  // Return the parsed JSON
              .then(data => {
                  // Update the output area with the result
                  output.textContent = data.output;
              })
              .catch(error => console.error('ERROR:', error));
        });
    });

    // Funzione per ottenere il token CSRF dal meta tag
    function getCSRFToken() {
        return document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    }

    // Timer
    document.addEventListener("turbo:load", function() {
        const timerElement = document.getElementById('timer');
        const timerExpiresAt = new Date("<%= @match.timer_expires_at.iso8601 %>");

        function updateTimer() {
            const now = new Date();
            const timeRemaining = timerExpiresAt - now;

            if (timeRemaining <= 0) {
                timerElement.textContent = "Time's up!";
                clearInterval(timerInterval);

                const csrfToken = getCSRFToken();

                fetch("<%= match_timeout_path(@match.id) %>", {
                    method: 'POST',
                    headers: {
                        'X-CSRF-Token': csrfToken,
                        'Content-Type': 'application/json'
                    },
                })
                  .then(response => response.json())
                  .then(data => {
                      console.log("Timeout response:", data);
                  })
                  .catch(error => console.error('ERROR:', error));
            } else {
                const minutes = Math.floor(timeRemaining / 1000 / 60);
                const seconds = Math.floor((timeRemaining / 1000) % 60);
                timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            }
        }

        const timerInterval = setInterval(updateTimer, 1000);
        updateTimer();
    });
</script>
